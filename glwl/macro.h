#pragma once

#include <GL\glew.h>
#define GLWL_CASE_MACRO(def) case def: return #def;

namespace glwl {
	namespace macro {
		const char* str(GLenum val) {
			switch (val) {
			GLWL_CASE_MACRO(GL_NO_ERROR)
			GLWL_CASE_MACRO(GL_INVALID_ENUM)
			GLWL_CASE_MACRO(GL_INVALID_VALUE)
			GLWL_CASE_MACRO(GL_INVALID_OPERATION)
			GLWL_CASE_MACRO(GL_STACK_OVERFLOW)
			GLWL_CASE_MACRO(GL_STACK_UNDERFLOW)
			GLWL_CASE_MACRO(GL_OUT_OF_MEMORY)
			GLWL_CASE_MACRO(GL_INVALID_FRAMEBUFFER_OPERATION)

			GLWL_CASE_MACRO(GL_STREAM_DRAW)
			GLWL_CASE_MACRO(GL_STREAM_READ)
			GLWL_CASE_MACRO(GL_STREAM_COPY)
			GLWL_CASE_MACRO(GL_STATIC_DRAW)
			GLWL_CASE_MACRO(GL_STATIC_READ)
			GLWL_CASE_MACRO(GL_STATIC_COPY)
			GLWL_CASE_MACRO(GL_DYNAMIC_DRAW)
			GLWL_CASE_MACRO(GL_DYNAMIC_READ)
			GLWL_CASE_MACRO(GL_DYNAMIC_COPY)

			GLWL_CASE_MACRO(GL_ARRAY_BUFFER)
			GLWL_CASE_MACRO(GL_ELEMENT_ARRAY_BUFFER)
			GLWL_CASE_MACRO(GL_UNIFORM_BUFFER)

			/*GLWL_CASE_MACRO(GL_STATIC_DRAW)
			GLWL_CASE_MACRO(GL_STATIC_READ)
			GLWL_CASE_MACRO(GL_STATIC_COPY)
			GLWL_CASE_MACRO(GL_DYNAMIC_DRAW)
			GLWL_CASE_MACRO(GL_DYNAMIC_READ)
			GLWL_CASE_MACRO(GL_DYNAMIC_COPY)*/

			default: return "<unknown>";
			}
		}
	}
}

#undef GLWL_CASE_MACRO
